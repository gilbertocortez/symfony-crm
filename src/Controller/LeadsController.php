<?php

namespace App\Controller;

use App\Entity\Leads;
use App\Form\NewLeadsType;

use App\Entity\Customer;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;

use DateTime;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Response;

class LeadsController extends AbstractController
{
    /**
     * @Route("/leads/viewAll", name="viewAllLeads")
     * 
     * View that displays all of the current leads stored on the database
     */
    public function viewCustomers()
    {
        // Get the Leads class repository
        $repository = $this->getDoctrine()
            ->getRepository(Leads::class);
        // Search for all leads available in the database
        $leads = $repository->findAll();

        // Render view from TWIG template, pass retrieved leads to display in view
        return $this->render('leads/viewAllLeads.html.twig', [
            'leads' => $leads,
        ]);
    }
    /**
     * @Route("/leads/add", name="addLead")
     * 
     * This route processes the submitted load creation form and adds it to the database
     */
    public function addLead()
    {
        // Get POST information sent
        $request = Request::createFromGlobals();
        // Start a new leads object
        $lead = new Leads();
        // Create a new form object and bound to leads class
        $formNewLead = $this->createForm(NewLeadsType::class, $lead);

        // Attach POST request data to leads class
        $formNewLead->handleRequest($request);

        // Check that the form validates
        if ($formNewLead->isSubmitted() && $formNewLead->isValid()) {
            // $newLead->getData() holds the submitted values
            // but, the original `$formNewLead` variable has also been updated
            $newLead = $formNewLead->getData();

            // you can fetch the EntityManager via $this->getDoctrine()
            $entityManager = $this->getDoctrine()->getManager();

            // Add current date time to new leads data
            $objDateTime = new DateTime('NOW');
            $lead->setDateCreated($objDateTime);
            $lead->setDateModified($objDateTime);

            // tell Doctrine you want to (eventually) save the lead (no queries yet)
            $entityManager->persist($lead);

            // actually executes the queries (i.e. the INSERT query)
            $entityManager->flush();

            // Redirect user to selected route
            return new RedirectResponse($this->generateUrl('viewAllLeads'));
            // Generate a response (for debug)
            //return new Response('Saved new lead with id ' . $lead->getId());
        }
    }
    /**
     * @Route("/leads/new/{customerID}", name="newLead")
     * 
     * This view creates a form that the user completed to create a new lead
     */
    public function newLead($customerID)
    {
        // Start a new Leads object
        $lead = new Leads();
        // Generate a new form from NewLeadsType (which is generated by 'php bin/console make:form'), change submit mode to POST and 
        // submit action url to the 'addLead' route
        $formNewLead = $this->createForm(NewLeadsType::class, $lead, [
            'action' => $this->generateUrl('addLead'),
            'method' => 'POST',
        ]);
        // Start a new connection to the database, get the Customer repository, and search the customer that corresponds with the customer id provided
        $customer = $this->getDoctrine()
            ->getRepository(Customer::class)
            ->find($customerID);

        // Check to see if there is a customer, if not throw an error
        if (!$customer) {
            throw $this->createNotFoundException(
                'No product found for id ' . $customerID
            );
        }

        // Render view from TWIG template using the generated form
        return $this->render('leads/newLead.html.twig', [
            'form' => $formNewLead->createView(),
            'customerID' => $customerID,
            'customer' => $customer,
        ]);
    }
    /**
     * @Route("/leads", name="leadsManager")
     * 
     * This is the home page for Leads
     */
    public function index()
    {
        // Render view from TWIG template
        return $this->render('leads/index.html.twig', [
            'controller_name' => 'LeadsController',
        ]);
    }
}
